MODIFIKACIJA FEBRUAR(swap elemenata niza)
niz = new int[7];
niz[1]=2;
niz[2]=5;
niz~2,1~;
print(niz[1]);//5
print(niz[2]);//2

.lex
"~"          { return new_symbol(sym.SWAP, yytext()); }

.cup
Statement ::= (StatementSwap) Designator SWAP Expr:prvi COMMA Expr:drugi SWAP SEMI;


 public void visit(StatementSwap statementSwap){
        Code.load(statementSwap.getDesignator().obj);
        Code.put(Code.dup_x2);
        Code.put(Code.dup_x1);
        Code.put(Code.pop);
        Code.put(Code.aload);
        Code.load(statementSwap.getDesignator().obj);
        Code.load(statementSwap.getExpr1().obj);
        Code.load(statementSwap.getDesignator().obj);
        Code.load(statementSwap.getExpr().obj);
        Code.put(Code.aload);
        Code.put(Code.astore);
        Code.put(Code.astore);
    }
_____________________________________________________________
MODIFIKACIJA JANUAR
.lex
"@"           {return new_symbol(sym.OPET, yytext());}

.cup
Factor ::= (FactorOpet) Designator OPET NUM;

public void visit(FactorOpet exprOpet){
        Designator a=exprOpet.getDesignator();
        System.out.println(a.obj);
        Code.load(exprOpet.getDesignator().obj);
        Code.load(exprOpet.getDesignator().obj);
        Code.put(Code.arraylength);//skida ime niza i stavlja duzinu
        Code.loadConst(exprOpet.getN2());
        Code.put(Code.sub);
        Code.put(Code.aload);
        Code.load(exprOpet.getDesignator().obj);
        Code.loadConst(exprOpet.getN2());
        Code.put(Code.aload);
        Code.put(Code.add);
    }
	
ExprListOne:
 if (exprListOne.getExpr().getClass()!=ExprTerm.class && exprListOne.getExpr().obj.getKind() == Obj.Elem && !(exprListOne.getExpr().getClass() == ExprAddop.class || termMulop != null)){//od niz 1 niz[1], ostavi samo niz[1] u exprListOne
            Code.put(Code.dup_x2);
            Code.put(Code.pop);
            Code.put(Code.pop);
            Code.put(Code.pop);
        }
_____________________________________________________________
MODIFIKACIJA FEBRUAR GOTO NA LABELU KOJA MOŽE BITI BILO GDE

.lex
"goto"      { return new_symbol(sym.GOTO, yytext()); }
":"         { return new_symbol(sym.DOUBLEDOT, yytext()); }

.cup	
StatementList ::= (Statements) StatementList StatementLabel
				  |
				  (NoStmt) /* epsilon */;

StatementLabel ::= (StatementLabel_) LabelList DOUBLEDOT Statement
                    |
                    (StatementNoLabel) Statement;

LabelList ::= (LabelListComma) LabelList COMMA LabelSingle
               |
               (LabelSingleDecl) LabelSingle;

LabelSingle ::= (LabelSingle) IDENT:label;

Label ::= (Label) IDENT:label;

Statement ::= | (StatementJump) GOTO Label:label SEMI;


public ArrayList<Obj> labelsNormal = new ArrayList<Obj>();
    public ArrayList<Obj> labelsGoto = new ArrayList<Obj>();

    public void visit(LabelSingle label) {
        Obj lblGoto = checkLabelGoto(label.getLabel());
        if (lblGoto == null) {
            labelsNormal.add(new Obj(Obj.Con, label.getLabel(), Tab.noType, Code.pc, 0));
            System.out.println("Prepoznata normalna labela:" + label.getLabel());
        } else {
            Code.fixup(lblGoto.getAdr());
        }
    }

    public void visit(Label label) {
        Obj lblNormal = checkLabelNormal(label.getLabel());
        if (lblNormal == null) {
            Code.putJump(0);
            int adr = Code.pc - 2;
            labelsGoto.add(new Obj(Obj.Con, label.getLabel(), Tab.noType, adr, 0));
            System.out.println("Prepoznata GOTO labela:" + label.getLabel());
        } else {
            Code.putJump(lblNormal.getAdr());
        }
    }

    private Obj checkLabelNormal(String name) {
        for (int i = 0; i < labelsNormal.size(); i++) {
            Obj lbl = labelsNormal.get(i);
            if (lbl.getName().equals(name)) {
                return lbl;
            }
        }
        return null;
    }

    private Obj checkLabelGoto(String name) {
        for (int i = 0; i < labelsGoto.size(); i++) {
            Obj lbl = labelsGoto.get(i);
            if (lbl.getName().equals(name)) {
                return lbl;
            }
        }
        return null;
    }
_____________________________________________________________
PRONALAŽENJE MAKSIMUMA NIZA

.lex
"max"       { return new_symbol(sym.MAX, yytext()); }

.cup
Factor ::= | (FactorMax) MAX SWAP Designator SWAP;  //SWAP da ne bi pravilo konflikte, i ne mora

public void visit(FactorMax factorMax) {
        Code.load(factorMax.getDesignator().obj);
        Code.put(Code.dup);
        Code.put(Code.arraylength);//aload
        Code.loadConst(1);
        Code.put(Code.sub);
        Code.put(Code.dup_x1);
        Code.put(Code.aload);

//pocetak petlje
        int adrWhile = Code.pc;
        Code.put(Code.dup_x1);
        Code.put(Code.pop);
        Code.put(Code.dup);
        Code.loadConst(0);
        Code.putFalseJump(Code.gt,0);
        int endWhile = Code.pc-2;

        Code.loadConst(1);
        Code.put(Code.sub);
        Code.load(factorMax.getDesignator().obj);
        Code.put(Code.dup_x1);
        Code.put(Code.pop);
        Code.put(Code.dup_x2);
        Code.put(Code.aload);

        Code.put(Code.dup2);
        Code.putFalseJump(Code.gt,0);
        int elseAdr = Code.pc - 2;
        Code.put(Code.pop);
        Code.putJump(0);
        int thenAdr = Code.pc - 2;
        Code.fixup(elseAdr);
        Code.put(Code.dup_x1);
        Code.put(Code.pop);
        Code.put(Code.pop);
        Code.fixup(thenAdr);

        Code.putJump(adrWhile);
        Code.fixup(endWhile);
//kraj petlje
        Code.put(Code.pop);
        Code.put(Code.dup);
        //Code.put(Code.pop);

    }