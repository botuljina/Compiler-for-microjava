package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}
terminal PROG, LBRACE, RBRACE, CONST, SEMI, EQUAL, COMMA, VOID, LPAREN, RPAREN, LSQUARE, RSQUARE, COLON, RETURN, READ, PRINT, GOTO, MINUS,PLUS, MUL, DIV, MOD, NEW,INC,DEC,CHECKEQUAL,NOTEQUAL,GREATER,GREATEROREQUAL,LESSER,LESSEROREQUAL;
terminal String IDENT;
terminal Integer NUMBER, BOOL;
terminal Character CHAR;

nonterminal Program Program;
nonterminal ConVarDeclList ConVarDeclList;
nonterminal ConDeclList ConDeclList;
nonterminal ConDecl ConDecl;
nonterminal Constant Constant;
nonterminal VarDeclList VarDeclList;
nonterminal ConDeclMore ConDeclMore;
nonterminal VarDecl VarDecl;
nonterminal VarDeclMore VarDeclMore;
nonterminal MethVarDeclList MethVarDeclList;
nonterminal GoToLabel GoToLabel;
nonterminal
StatementList StatementList;
nonterminal Statement Statement;
nonterminal Label Label;
nonterminal SingleStatement SingleStatement;
nonterminal Statements Statements;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal StatementsList StatementsList;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Assignop Assignop;
nonterminal Relop Relop;

nonterminal ProgramName ProgramName;
nonterminal Unary Unary;

nonterminal rs.etf.pp1.symboltable.concepts.Obj  Designator, DesignatorArrayName,MethDecl, MethDeclName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expr, ExprList, Term, FactorLow, TermList, Factor;

Program ::= (Program) PROG ProgramName:P1 ConVarDeclList:C2 LBRACE MethDecl:M3 RBRACE {: RESULT=new Program(P1, C2, M3); RESULT.setLine(P1left); :};

ProgramName ::= (ProgramName) IDENT:progName {: RESULT=new ProgramName(progName); RESULT.setLine(progNameleft); :};

ConVarDeclList ::= 	(ConVarDeclList_con) ConVarDeclList:C1 ConDeclList:C2 {: RESULT=new ConVarDeclList_con(C1, C2); RESULT.setLine(C1left); :}
					|
					(ConVarDeclList_var) ConVarDeclList:C1 VarDeclList:V2 {: RESULT=new ConVarDeclList_var(C1, V2); RESULT.setLine(C1left); :}
					|
					(ConVarDeclList_e) {: RESULT=new ConVarDeclList_e(); :} /* epsilon */
					;
		
ConDeclList ::= (ConDeclList) CONST Type:T1 ConDecl:C2 ConDeclMore:C3 SEMI {: RESULT=new ConDeclList(T1, C2, C3); RESULT.setLine(T1left); :} ;

ConDeclMore ::= (ConDeclMore_comma) COMMA ConDecl:C1 ConDeclMore:C2 {: RESULT=new ConDeclMore_comma(C1, C2); RESULT.setLine(C1left); :}
				|
				(ConDeclMore_e) {: RESULT=new ConDeclMore_e(); :} /* epsilon */
				;

ConDecl ::= (ConDecl) IDENT:I1 EQUAL Constant:C2 {: RESULT=new ConDecl(I1, C2); RESULT.setLine(I1left); :} ;

Constant ::= (Constant_n) NUMBER:N1 {: RESULT=new Constant_n(N1); RESULT.setLine(N1left); :} | (Constant_b) BOOL:B1 {: RESULT=new Constant_b(B1); RESULT.setLine(B1left); :} | (Constant_c) CHAR:C1 {: RESULT=new Constant_c(C1); RESULT.setLine(C1left); :} ;

Type ::= (Type) IDENT:I1 {: RESULT=new Type(I1); RESULT.setLine(I1left); :};

VarDeclList ::= (VarDeclList) Type:T1 VarDecl:V2 VarDeclMore:V3 SEMI {: RESULT=new VarDeclList(T1, V2, V3); RESULT.setLine(T1left); :};

VarDeclMore ::= (VarDeclMore_comma) COMMA VarDecl:V1 VarDeclMore:V2 {: RESULT=new VarDeclMore_comma(V1, V2); RESULT.setLine(V1left); :}
				|
				(VarDeclMore_e) {: RESULT=new VarDeclMore_e(); :} /* epsilon */
				;
				
VarDecl ::= (VarDecl_braces) IDENT:varName LSQUARE RSQUARE {: RESULT=new VarDecl_braces(varName); RESULT.setLine(varNameleft); :}			
			|
			(VarDecl_identonly) IDENT:varName {: RESULT=new VarDecl_identonly(varName); RESULT.setLine(varNameleft); :};
			
MethDecl ::= (MethDecl) VOID MethDeclName:M1 LPAREN RPAREN MethVarDeclList:M2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethDecl(M1, M2, S3); RESULT.setLine(M1left); :} ;

MethDeclName ::= (MethDeclName) IDENT:I1 {: RESULT=new MethDeclName(I1); RESULT.setLine(I1left); :};


MethVarDeclList ::= (MethVarDeclList_vardecl) VarDeclList:V1 MethVarDeclList:M2 {: RESULT=new MethVarDeclList_vardecl(V1, M2); RESULT.setLine(V1left); :}
					|
					(MethVarDeclList_e) {: RESULT=new MethVarDeclList_e(); :}/* epsilon */
					; 	
					
StatementList ::= 	(StatementList_statement) Statement:S1 StatementList:S2 {: RESULT=new StatementList_statement(S1, S2); RESULT.setLine(S1left); :}
					|
					(StatementList_e) {: RESULT=new StatementList_e(); :} /* epsilon */
					;	
					
Statement ::= (Statement_label) Label:L1 COLON SingleStatement:S2 {: RESULT=new Statement_label(L1, S2); RESULT.setLine(L1left); :}
			  |
			  (Statement_nolabel) SingleStatement:S1 {: RESULT=new Statement_nolabel(S1); RESULT.setLine(S1left); :}
			  |
			  (Statement_statements) Statements:S1 {: RESULT=new Statement_statements(S1); RESULT.setLine(S1left); :}
			  ;			

Label ::= (Label) IDENT:I1 {: RESULT=new Label(I1); RESULT.setLine(I1left); :};		

SingleStatement ::= (SingleStatement_desigstmt) DesignatorStatement:D1 SEMI {: RESULT=new SingleStatement_desigstmt(D1); RESULT.setLine(D1left); :}
					|
					(SingleStatement_return) RETURN SEMI {: RESULT=new SingleStatement_return(); :}
					|
					(SingleStatement_read) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new SingleStatement_read(D1); RESULT.setLine(D1left); :}
					|
					(SingleStatement_printNumConst) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new SingleStatement_printNumConst(E1, N2); RESULT.setLine(E1left); :}
					|
					(SingleStatement_print) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new SingleStatement_print(E1); RESULT.setLine(E1left); :}
					|
					(SingleStatement_goto) GOTO GoToLabel:G1 SEMI {: RESULT=new SingleStatement_goto(G1); RESULT.setLine(G1left); :}
					;
					
Statements ::= 	(Statements) LBRACE StatementsList:S1 RBRACE {: RESULT=new Statements(S1); RESULT.setLine(S1left); :};	

StatementsList ::= (StatementsList_statement) Statement:S1 StatementsList:S2 {: RESULT=new StatementsList_statement(S1, S2); RESULT.setLine(S1left); :}
					|
					(StatementsList_e) {: RESULT=new StatementsList_e(); :} /* epsilon */
					;	
	

Designator ::= 	(Designator_elem) DesignatorArrayName:D1 LSQUARE Expr:E2 RSQUARE {: RESULT=new Designator_elem(D1, E2); RESULT.setLine(D1left); :}
				|
				(Designator_var) IDENT:I1 {: RESULT=new Designator_var(I1); RESULT.setLine(I1left); :}
				;
				
DesignatorArrayName ::= (DesignatorArrayName) IDENT:I1 {: RESULT=new DesignatorArrayName(I1); RESULT.setLine(I1left); :};

Expr ::= 	(Expr) ExprList:E1 {: RESULT=new Expr(E1); RESULT.setLine(E1left); :}
			;

ExprList ::= 	(ExprList_l) ExprList:E1 Addop:A2 Term:T3 {: RESULT=new ExprList_l(E1, A2, T3); RESULT.setLine(E1left); :} 
				|
				(ExprList_t)  Term:T1 {: RESULT=new ExprList_t(T1); RESULT.setLine(T1left); :}
				;	
				
Addop ::= 	(Addop_plus) PLUS {: RESULT=new Addop_plus(); :}
			|
			(Addop_minus) MINUS {: RESULT=new Addop_minus(); :}
			;

Term ::= (Term) TermList:T1 {: RESULT=new Term(T1); RESULT.setLine(T1left); :};

TermList ::= 	(TermList_m) TermList:T1 Mulop:M2 Factor:F3 {: RESULT=new TermList_m(T1, M2, F3); RESULT.setLine(T1left); :} 
				|
				(TermList_f) Factor:F1 {: RESULT=new TermList_f(F1); RESULT.setLine(F1left); :}
				;

Mulop ::= 	(Mulop_mul) MUL {: RESULT=new Mulop_mul(); :}
			| 
			(Mulop_div) DIV {: RESULT=new Mulop_div(); :}
			|
			(Mulop_mod) MOD {: RESULT=new Mulop_mod(); :}
			;
			
Factor ::= (Factor) Unary:U1 FactorLow:F2 {: RESULT=new Factor(U1, F2); RESULT.setLine(U1left); :};

Unary ::= (Unary_m) MINUS {: RESULT=new Unary_m(); :} | (Unary_e) {: RESULT=new Unary_e(); :} ;
			
FactorLow ::=(Factor_des) Designator:D1 {: RESULT=new Factor_des(D1); RESULT.setLine(D1left); :}
			|
			(Factor_num) NUMBER:N1 {: RESULT=new Factor_num(N1); RESULT.setLine(N1left); :}
			|
			(Factor_char) CHAR:C1 {: RESULT=new Factor_char(C1); RESULT.setLine(C1left); :}
			|
			(Factor_bool) BOOL:B1 {: RESULT=new Factor_bool(B1); RESULT.setLine(B1left); :}
			|
			(Factor_newexpr) NEW Type:T1 LSQUARE Expr:E2 RSQUARE {: RESULT=new Factor_newexpr(T1, E2); RESULT.setLine(T1left); :} 
			|
			(Factor_paren) LPAREN Expr:E1 RPAREN {: RESULT=new Factor_paren(E1); RESULT.setLine(E1left); :}
			;			


DesignatorStatement ::= (DesignatorStatement_asssign) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorStatement_asssign(D1, A2, E3); RESULT.setLine(D1left); :}
							|
							(DesignatorStatement_inc) Designator:D1 INC {: RESULT=new DesignatorStatement_inc(D1); RESULT.setLine(D1left); :}
							|
							(DesignatorStatement_dec) Designator:D1 DEC {: RESULT=new DesignatorStatement_dec(D1); RESULT.setLine(D1left); :}
							;

Assignop ::= (Assignop) EQUAL {: RESULT=new Assignop(); :};			

Relop ::= 	(Relop_checkequal) CHECKEQUAL {: RESULT=new Relop_checkequal(); :}
			|
			(Relop_notequal) NOTEQUAL {: RESULT=new Relop_notequal(); :}
			|
			(Relop_greater) GREATER {: RESULT=new Relop_greater(); :}
			|
			(Relop_greaterorequal) GREATEROREQUAL {: RESULT=new Relop_greaterorequal(); :}
			|
			(Relop_lesser) LESSER {: RESULT=new Relop_lesser(); :}
			|
			(Relop_lesserorequal) LESSEROREQUAL {: RESULT=new Relop_lesserorequal(); :}
			;		
			
GoToLabel ::= (GoToLabel) IDENT:I1 {: RESULT=new GoToLabel(I1); RESULT.setLine(I1left); :};